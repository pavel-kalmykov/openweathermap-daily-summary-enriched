[tool.poetry]
name = "openweathermap-daily-summary-enriched"
version = "0.1.0"
description = "An API that fetches daily weather summaries from the OpenWeatherMap API and enriches them with some additional calculations"
authors = ["Pavel Kalmykov Razgovorov <pavel.granalacant@gmail.com>"]
license = "CC0 1.0 Universal"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
fastapi = {extras = ["standard"], version = "^0.115.0"}
uvicorn = {extras = ["standard"], version = "^0.30.6"}
sqlalchemy = {extras = ["asyncio"], version = "^2.0.35"}
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.9"
polars = "^1.8.2"
pydantic = "^2.9.2"
python-dotenv = "^1.0.1"
httpx = "^0.27.2"
alembic = "^1.13.3"
pydantic-settings = "^2.5.2"
aiolimiter = "^1.1.0"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
respx = "^0.21.1"
aiosqlite = "^0.20.0"
pytest-env = "^1.1.5"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"
mkdocs-material = "^9.5.39"
mkdocstrings = {extras = ["python"], version = "^0.26.1"}

[tool.ruff]
extend-exclude = ["alembic"]
line-length = 88
src = ["app", "tests"]

[tool.ruff.lint]
# Enable pycodestyle ('E'), pyflakes ('F'), isort ('I'),
# and type-checking rules
select = [
    "E", "F", "I",
    "ANN", # flake8-annotations
    "TCH", # flake8-type-checking
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "RUF", # Ruff-specific rules
    "B",  # flake8-bugbear
    "S",  # flake8-bandit
    "A",  # flake8-builtins
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EM",  # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "UP",  # pyupgrade
    "N",  # pep8-naming
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",  # pydantic-specific rules
]
ignore = ["E501"]

# Enable Pyflakes `F401` check.
extend-select = ["F401"]

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
"__init__.py" = ["E402"]
# Ignore asserts in tests
"tests/**/*.py" = ["S101"]

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "sqlalchemy"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 5

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true


[tool.pytest.ini_options]
addopts = "-v --cov=app --cov-report=term-missing"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
env = [
    "DB_URL=sqlite+aiosqlite:///:memory:",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
